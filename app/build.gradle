apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 32

    defaultConfig {
        applicationId "de.hajo.beermat"
        minSdkVersion 21
        targetSdkVersion 32
        versionCode 1
        versionName "1.0-CHEERS"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'

        testOptions {
            execution 'ANDROIDX_TEST_ORCHESTRATOR'
        }

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
        }
        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.android.material:material:1.6.0-beta01'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'androidx.room:room-runtime:2.4.2'
    implementation 'androidx.appcompat:appcompat:1.6.0-alpha01'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'com.airbnb.android:lottie:2.8.0'

    // https://developer.android.com/topic/libraries/architecture/adding-components#room
    kapt 'androidx.room:room-compiler:2.4.2'
    kapt 'androidx.lifecycle:lifecycle-compiler:2.5.0-alpha04'

    androidTestImplementation 'androidx.room:room-testing:2.4.2'
    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'

    androidTestUtil 'androidx.test:orchestrator:1.4.1'
}

// the screenshot process: create directories, save the screens, pull them to the project output and remove all screens from device in the end
def reportsDirectory = "$buildDir/reports/androidTests/connected"

task copyScreenshotReport {
    // do nothing here, it will always be executed even during gradle clean, see
    // https://stackoverflow.com/questions/20737494/why-is-my-gradle-task-always-running
    // https://docs.gradle.org/current/userguide/build_lifecycle.html
    // https://proandroiddev.com/understanding-gradle-the-build-lifecycle-5118c1da613f
    doLast {
        copy {
            from "$buildDir/reports/androidTests/connected/espresso-screenshots"
            into "$buildDir/espresso-screenshots"
            println("XXX\nTask copyScreenshotReport finished")
        }
    }
}

def clearScreenshotsTask = task('clearScreenshots', type: Exec) {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'rm', '-r', '/sdcard/Pictures/beermat-screenshots'
    finalizedBy {
        copyScreenshotReport
    }
}

def createScreenshotDirectoryTask = task('createScreenshotDirectory', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'mkdir', '-p', '/sdcard/Pictures/beermat-screenshots'
}

def fetchScreenshotsTask = task('fetchScreenshots', type: Exec, group: 'reporting') {
    executable "${android.getAdbExe().toString()}"
    args 'pull', '/sdcard/Pictures/beermat-screenshots/.', reportsDirectory
    finalizedBy {
        clearScreenshotsTask
    }

    dependsOn {
        createScreenshotDirectoryTask
    }

    doFirst {
        def folder = new File(reportsDirectory)
        if (!folder.exists()) {
            folder.mkdirs()
        }
    }
}

tasks.whenTaskAdded { task ->
// this task (cAT) generates the report in output -> https://developer.android.com/studio/test/command-line
    if (task.name == 'connectedDebugAndroidTest') {
        task.finalizedBy {
            fetchScreenshotsTask
        }
    }
}